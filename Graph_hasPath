public class Graph{
       Graph 
            40         2
        0--------3----------4
        |        |          |  \
      10|        |10       3|    \3
        |        |          |      \
        1--------2          5-------6
            10                 3
        we implement graph using adjacencylist
        0->[0,1,10][0,3,10]
        1->[1,0,10][1,2,10]
        2->[2,1,10][2,3,10][2,5,10]
        3->[3,0,40][3,2,10][3,4,2]
        4->[4,3,2][4,5,3][4,6,3]
        5->[5,4,3][5,6,3][5,2,10]
        6->[6,4,3][6,5,3]
            
        public static class Edge{
              int v1;
              int v2;
              int wt;
              Edge(int v1,int v2,int wt){
                this.v1=v1;
                this.v2=v2;
                this.wt=wt;
              }
            }
            
     //HAS PATH FUNCTION
     public static boolean hasPath(ArrayList<Edge>[] graph,int src,int des ,boolean[] visited) {
              if(src==des) {
                return true;
              }
              //neighbor se hoga toh hoga rasta nhi toh nhi
              visited[src]=true;
              for(Edge e:graph[src]) {
                if(visited[e.v2]==false) {
                boolean path=hasPath(graph,e.v2,des,visited);
                if(path==true) {
                  return true;
                }
                }
              }
              return false;
    }
        public static void main(String[] args) throws Exception {
        //noramally take input
        
            int vtces=7;//0,1,2,3,4,5,6
            //array of arraylist
            ArrayList<Edge> [] graph=new ArrayList[vtces];
            for(int i=0;i<vtces;i++) {
              graph[i]=new ArrayList<>();
            }
                graph[0].add(new Edge(0,1,10));
                graph[0].add(new Edge(0,3,10));
                graph[1].add(new Edge(1,0,10));
                graph[1].add(new Edge(1,2,10));
                graph[2].add(new Edge(2,1,10));
                graph[2].add(new Edge(2,3,10));
                graph[3].add(new Edge(3,0,40));
                graph[3].add(new Edge(3,2,10));
                graph[3].add(new Edge(3,4,2));
                graph[4].add(new Edge(4,3,2));
                graph[4].add(new Edge(4,5,3));
                graph[4].add(new Edge(4,6,3));
                graph[5].add(new Edge(5,4,3));
                graph[5].add(new Edge(5,6,3));
                graph[6].add(new Edge(6,4,3));
                graph[6].add(new Edge(6,5,3));
                graph[2].add(new Edge(2,5,10));
                graph[5].add(new Edge(5,2,10));
               
               boolean[] visited=new boolean[vtces];
               boolean path=hasPath(graph,0,6,visited);
               System.out.println(path);
        }
}
