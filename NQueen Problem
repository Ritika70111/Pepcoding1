//print all safe configuration of n queens
	/* we have n*n chess board we have to place n number of queens
	 * in n*n cells of boardsuch no two queen can attack/kill each other .
	 * queen can kill horizontally ,vertically and diagonally
	 *  queens can kill 8 directions
	 *  if n=4
	 *  Path1 0-1,1-3,2-0,3-2,
        Path2 0-2,1-0,2-3,3-1,
	 */
   
  public class Recursion{
	public static void printNQueens(int[][] chess,String qsf,int row) {
		//base case
		if(row==chess.length) {
			count++;
			System.out.println("Path"+count+" "+qsf);
			return;
		}
		
		for(int col=0;col<chess.length;col++) {
			if(isQueenSafe(chess,row,col)==true) {
			chess[row][col]=1;
			printNQueens(chess,qsf+row+"-"+col+",",row+1);
			chess[row][col]=0;
			}
		}
	}
	
	public static boolean isQueenSafe(int[][] chess,int row,int col) {
		//vertical
		for(int i=row-1,j=col;i>=0;i--) {
			if(chess[i][j]==1) {
				return false;
			}
		}
		//diagonal d1
		for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--) {
			if(chess[i][j]==1) {
				return false;
			}
		}
		//diagonal d2
		for(int i=row-1,j=col+1;i>=0&&j<chess.length;i--,j++) {
			if(chess[i][j]==1) {
				return false;
			}
		}
		return true;
	}
  
  
  //Alternative way to solve Nqueen problem 2nd method to print output
	// if n=4
	/*
	 *  0 1 0 0 
		0 0 0 1 
		1 0 0 0 
		0 0 1 0 
		****************
		0 0 1 0 
		1 0 0 0 
		0 0 0 1 
		0 1 0 0 
		****************

	 */
	public static void printNQueens2(int[][] chess,int row) {
		//base case
		if(row==chess.length) {
			display(chess);
			return;
		}
		
		for(int col=0;col<chess.length;col++) {
			if(isQueenSafe(chess,row,col)==true) {
			chess[row][col]=1;
			printNQueens2(chess,row+1);
			chess[row][col]=0;
			}
		}
	}
	
	public static void display(int[][] chess) {
		for(int i=0;i<chess.length;i++) {
			for(int j=0;j<chess[0].length;j++) {
				System.out.print(chess[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println("****************");
	}
  public static void main(String[] args) {
   int n=4;
		int[][] chess=new int[n][n];
		printNQueens(chess,"",0);
 //		printNQueens2(chess,0);
  }
  }
	
