import java.util.ArrayList;

public class Recursion {

 //QUESTION 1
 
 //Recursion using arrayList
    //get subsequence
    /* subset 2^n
     * n=3--->2^3-->8
     *    ---
     *    --c
     *    -b-
     *    -bc
     *    a--
     *    a-c
     *    ab-
     *    abc
     *    
     * getss(abc) ---> - getss(bc)+a getss(bc)
     * 
     */
     
    public static ArrayList<String> getss(String str) {
    	if(str.length()==0) {
    		ArrayList<String> br=new ArrayList<>();
    		br.add("");
    		return br;
    	}
    	char ch=str.charAt(0);//a
    	String roq=str.substring(1);//bc
    	ArrayList<String> mres=new ArrayList<>();
    	ArrayList<String> res=getss(roq);//[--,-c,b-,bc]
    	for(String s:res) {
    		mres.add("-"+s);//[---,--c,-b-,-bc]
    	}
    	for(String s:res) {
    		mres.add(ch+s);//[a--,a-c,ab-,abc]
    	}
      return mres;
    }
    
    
    //QUESTION 2
    
    /*  sr-->1 sc-->1 
     * dr-->2 dc-->2
     * Maze Path-->[hv,vh]
     *  only horizontal and vertical moves allowed
     */
    public static ArrayList<String> getMazePath(int sr,int sc,int dr,int dc){
    	//Reactive case call stupid smart basecase
   	 // base case where print result
    	if(sr==dr&&sc==dc) {
    		ArrayList<String> br=new ArrayList<>();
    		br.add("");
    		return br;
    	}
    	//negative base case
    	if(sr>dr||sc>dc) {
    		ArrayList<String> br=new ArrayList<>();
    		return br;
    	}
    	ArrayList<String> mres=new ArrayList<>();
    	//horizontal call
    	ArrayList<String> hpath=getMazePath(sr,sc+1,dr,dc);
    	//vertical call
    	ArrayList<String> vpath=getMazePath(sr+1,sc,dr,dc);
    	for(String s:hpath) {
    		mres.add("h"+s);
    	}
    	for(String s:vpath) {
    		mres.add("v"+s);
    	}
       return mres;
    }
    
    
    //QUESTION 3
    
    /*  sr-->1 sc-->1 
     * dr-->2 dc-->2
     * Maze Path-->[hv,vh,d]
     *  only horizontal,vertical and diagonal, moves allowed
     */
    public static ArrayList<String> getMazePathdiag(int sr,int sc,int dr,int dc){
//   	 // base case where print result
		   	if(sr==dr&&sc==dc) {
		   		ArrayList<String> br=new ArrayList<>();
		   		br.add("");
		   		return br;
		   	}
		   	//negative base case
		   	if(sr>dr||sc>dc) {
		   		ArrayList<String> br=new ArrayList<>();
		   		return br;
		   	}
		   	ArrayList<String> mres=new ArrayList<>();
		   	//horizontal call
		   	ArrayList<String> hpath=getMazePathdiag(sr,sc+1,dr,dc);
		   	//vertical call
		   	ArrayList<String> vpath=getMazePathdiag(sr+1,sc,dr,dc);
		   	//diagonal call
		   	ArrayList<String> dpath=getMazePathdiag(sr+1,sc+1,dr,dc);
		   	for(String s:hpath) {
		   		mres.add("h"+s);
		   	}
		   	for(String s:vpath) {
		   		mres.add("v"+s);
		   	}
		   	for(String s:dpath) {
		   		mres.add("d"+s);
		   	}
		      return mres;
   }
   
   
   
   //QUESTION 4
  
    public static ArrayList<String> getMazePathWithJumps(int sr,int sc,int dr,int dc){
    	if(sr==dr&&sc==dc) {
    		ArrayList<String> mpath=new ArrayList<>();
    		mpath.add("");
    		return mpath;
    	}
 
    	ArrayList<String> mpath=new ArrayList<>();
    	//horizontal call
    	for(int ma=1;ma<=dc-sc;ma++) {
    		ArrayList<String> hpath=getMazePathWithJumps(sr,sc+ma,dr,dc);
    		for(String s:hpath) {
    		 mpath.add("h"+ma+s);
    		}
    	}
    	//vertical call
    	for(int ma=1;ma<=dr-sr;ma++) {
    		ArrayList<String> vpath=getMazePathWithJumps(sr+ma,sc,dr,dc);
    		for(String s:vpath) {
    		 mpath.add("v"+ma+s);
    		}
    	}
    	//diagonal call
    	for(int ma=1;ma<=dc-sc&&ma<=dr-sr;ma++) {
    		ArrayList<String> dpath=getMazePathWithJumps(sr+ma,sc+ma,dr,dc);
    		for(String s:dpath) {
    		 mpath.add("d"+ma+s);
    		}
    	}
    	return mpath;
    }
    
    
    //QUESTION 5
    
    public static ArrayList<String> getStairPath(int n) {
    	//1 2 3 allowed only
    	if(n==0) {
    		ArrayList<String> mpath=new ArrayList<>();
    		mpath.add("");
    		return mpath;
    	}
    	if(n<0) {
    		ArrayList<String> mpath=new ArrayList<>();
    		return mpath;
    	}
    	ArrayList<String> mpath=new ArrayList<>();
    	ArrayList<String> path1=getStairPath(n-1);
    	ArrayList<String> path2=getStairPath(n-2);
    	ArrayList<String> path3=getStairPath(n-3);
    	for(String s:path1) {
    		mpath.add("1"+s);
    	}
    	for(String s:path2) {
    		mpath.add("2"+s);
    	}
    	for(String s:path3) {
    		mpath.add("3"+s);
    	}
    	return mpath;
    }
    
    
    
    //QUESTION 6
    
	 public static ArrayList<String> getkpc(String str){
		String[] code = { ".;", "abc", "def", "ghi", "jkl", "mnop", "qrst", 
				"uv", "wxyz" };
		if(str.length()==0) {
			ArrayList<String> br=new ArrayList<>();
			br.add("");
			return br;
		}
		char ch=str.charAt(0);//5
		String ros=str.substring(1);//73
		ArrayList<String> res=getkpc(ros);
		ArrayList<String> mres=new ArrayList<>();
		String s=code[ch-'0'];//mno
		for(int i=0;i<s.length();i++) {
			char c=s.charAt(i);//m
			for(String s1:res) {
				mres.add(c+s1);
			}
		}
		return mres;
	}
  
  
  
  //QUESTION 7
  
    //print subsequence more optimal
	//Because in getsubsequence uses arraylist to store all data and then print 
	//so it requires more memory.Instead we use print subsequence , not store 
	// only print when hit a base case in recursion
	public static void printss(String ques, String ans) {
		if(ques.length()==0) {
			System.out.println(ans);
			return;
		}
		char ch=ques.charAt(0);//a
		String roq=ques.substring(1);//bc
		//two calls
		//lega
		printss(roq,ans+ch);
		//nahi lega
		printss(roq,ans+"-");
		
	}
  
  //QUESTION 8
  
	static int count=0;
	public static void printMazePaths(int sr,int sc,int dr,int dc,String psf) {
		//reactive case
		//result print
		if(sr==dr&&sc==dc) {
			count++;
			System.out.println(count+" "+psf);
			return;
		}
		//negative base 
		//there are possibilities that we have some call out of box then we have to return
		if(sr>dr||sc>dc) {
			return;
		}
		//horizontal call 
		printMazePaths(sr,sc+1,dr,dc,psf+"h");
		//vertical call
		printMazePaths(sr+1,sc,dr,dc,psf+"v");
	}
  
  
//  QUESTION 9
  
	public static void printMazePathsdiag(int sr,int sc,int dr,int dc,String psf) {
		//reactive case
		//result print
		if(sr==dr&&sc==dc) {
			count++;
			System.out.println(count+" "+psf);
			return;
		}
		//negative base 
		//there are possibilities that we have some call out of box then we have to return
		if(sr>dr||sc>dc) {
			return;
		}
		//horizontal call 
		printMazePathsdiag(sr,sc+1,dr,dc,psf+"h");
		//vertical call
		printMazePathsdiag(sr+1,sc,dr,dc,psf+"v");
		//diagonal call
		printMazePathsdiag(sr+1,sc+1,dr,dc,psf+"d");
	}
  
  
  //QUESTION 10
  
	/*
	 * proactive case where we have smart calls we have to check condition
	 *  before making a call
	 */
	public static void mazepath1(int sr, int sc, int dr, int dc, String psf) {
		// base case where we print result
		if (sr == dr && sc == dc) {
			System.out.println(psf);
		}
		// proactive case
		// horizontal call
		if (sc + 1 <= dc)
			mazepath1(sr, sc + 1, dr, dc, psf + "H");
		// vertical call
		if (sr + 1 <= dr)
			mazepath1(sr + 1, sc, dr, dc, psf + "v");
	}
  
  //QUESTION 11
  
	public static void printMazePathWithJumps(int sr,int sc,int dr,int dc,String psf) {
		if(sr==dr&&sc==dc) {
			count++;
			System.out.println(count+" "+psf);
			return;
		}
		//Horizontal call
		for(int ma=1;ma<=dc-sc;ma++) {
		  printMazePathWithJumps(sr,sc+ma,dr,dc,psf+"h"+ma);
		}
		//Vertical call
		for(int ma=1;ma<=dr-sr;ma++) {
			  printMazePathWithJumps(sr+ma,sc,dr,dc,psf+"v"+ma);
			}
		//Diagonal call
		for(int ma=1;ma<=dc-sc&&ma<=dr-sr;ma++) {
			  printMazePathWithJumps(sr+ma,sc+ma,dr,dc,psf+"d"+ma);
			}
	}
  
  
  //QUESTION 12
  
	public static void printStairPaths(int n,String psf)
	{
		if(n==0) {
			count++;
			System.out.println(count+" "+psf);
			return;
		}
		if(n<0) {
			return;
		}
		//1 2 3 allowed
		printStairPaths(n-1,psf+"1");
		printStairPaths(n-2,psf+"2");
		printStairPaths(n-3,psf+"3");
	}
  
  
  
  //QUESTION 13
	public static void printkpc(String ques,String ans) {
		//6 7 8
		String[] code = { ".;", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wx", "yz" };
		
		if (ques.length() == 0) {
			count++;
			System.out.println(count + " " + ans);
			return;
		}
		char ch=ques.charAt(0);//6
		String choices=code[ch-'0'];//pqrs
		String roq=ques.substring(1);//78
		for(int i=0;i<choices.length();i++) {
		printkpc(roq,ans+ choices.charAt(i));
		}
	}
  
  
public static void main(String[] args) {
		// TODO Auto-generated method stub
    
//		System.out.println(getss("abc"));
//		System.out.println(getMazePathdiag(1,1,3,3));
//		System.out.println(getMazePathWithJumps(1,1,2,2));
//		System.out.println(getStairPath(4));
//		System.out.println(getkpc("573"));
//		printss("abc","");
//		printMazePaths(1,1,3,3,"");
//		printMazePathsdiag(1,1,3,3,"");
//		printMazePathWithJumps(1,1,3,3,"");
//		printStairPaths(4,"");
		printkpc("678","");
	}
}
