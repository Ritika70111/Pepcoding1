public class Graph{
       Graph 
            40         2
        0--------3----------4
        |        |          |  \
      10|        |10       3|    \3
        |        |          |      \
        1--------2          5-------6
            10                 3
        we implement graph using adjacencylist
        0->[0,1,10][0,3,10]
        1->[1,0,10][1,2,10]
        2->[2,1,10][2,3,10][2,5,10]
        3->[3,0,40][3,2,10][3,4,2]
        4->[4,3,2][4,5,3][4,6,3]
        5->[5,4,3][5,6,3][5,2,10]
        6->[6,4,3][6,5,3]
            
        public static class Edge{
              int v1;
              int v2;
              int wt;
              Edge(int v1,int v2,int wt){
                this.v1=v1;
                this.v2=v2;
                this.wt=wt;
              }
            }
     public static void Display(ArrayList<Edge>[] graph) {
    	for(int v=0;v<graph.length;v++) {
    		System.out.print(v+"->");
    		//Edge e:graph[v]//alternate way in loop
        
    	  	for(int e=0;e<graph[v].size();e++) {
    			Edge e1=graph[v].get(e);
    			System.out.print("["+e1.v1+","+e1.v2+","+e1.wt+"]");
    		}
    		System.out.println();
    	}
    }
        public static void main(String[] args) throws Exception {
        //noramally take input
        
            int vtces=7;//0,1,2,3,4,5,6
            //array of arraylist
            ArrayList<Edge> [] graph=new ArrayList[vtces];
            for(int i=0;i<vtces;i++) {
              graph[i]=new ArrayList<>();
            }
                graph[0].add(new Edge(0,1,10));
                graph[0].add(new Edge(0,3,10));
                graph[1].add(new Edge(1,0,10));
                graph[1].add(new Edge(1,2,10));
                graph[2].add(new Edge(2,1,10));
                graph[2].add(new Edge(2,3,10));
                graph[3].add(new Edge(3,0,40));
                graph[3].add(new Edge(3,2,10));
                graph[3].add(new Edge(3,4,2));
                graph[4].add(new Edge(4,3,2));
                graph[4].add(new Edge(4,5,3));
                graph[4].add(new Edge(4,6,3));
                graph[5].add(new Edge(5,4,3));
                graph[5].add(new Edge(5,6,3));
                graph[6].add(new Edge(6,4,3));
                graph[6].add(new Edge(6,5,3));
                graph[2].add(new Edge(2,5,10));
                graph[5].add(new Edge(5,2,10));
                Display(graph);
                //userse input lena
                  //		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
                  //		int vtes=Integer.parseInt(br.readLine());//string 
                  //		ArrayList<Edge>[] graph=new ArrayList[vtes];
                  //		for(int v=0;v<vtes;v++) {
                  //			graph[v]=new ArrayList<>();
                  //		}
                  //		int edges=Integer.parseInt(br.readLine());
                  //		for(int i=0;i<edges;i++) {
                  //			String line=br.readLine();
                  //			String[] parts=line.split(" ");
                  //			int v1=Integer.parseInt(parts[0]);
                  //			int v2=Integer.parseInt(parts[1]);
                  //			int wt=Integer.parseInt(parts[2]);
                  //			graph[v1].add(new Edge(v1,v2,wt));
                  //			graph[v2].add(new Edge(v2,v1,wt));
                  //		}
                  //		Display(graph);
        }
}
