import java.util.ArrayList;

import java.util.ArrayList;

public class Blank{
             1. You are given a number n (representing the number of students). Each student will have an id 
             from 0 to n - 1.
        2. You are given a number k (representing the number of clubs)
        3. In the next k lines, two numbers are given separated by a space. The numbers are ids of 
             students belonging to same club.
        4. You have to find in how many ways can we select a pair of students such that both students are 
             from different clubs
     public static class Edge{
           int v1;
           int v2;
           int wt;
           Edge(int v1,int v2,int wt){
             this.v1=v1;
             this.v2=v2;
             this.wt=wt;
           }
         }
      public static void drawTree(ArrayList<Edge>[] graph,int src,
     		 ArrayList<Integer> comp, boolean[] visited){
		          visited[src]=true;
		          comp.add(src);
       for(Edge e: graph[src]){
         if(visited[e.v2]==false){
         drawTree(graph,e.v2,comp,visited);
         }
       }
      }

     public static void main(String[] args) throws Exception {
     //noramally take input
     
         int vtces=7;//0,1,2,3,4,5,6
         //array of arraylist
         
         ArrayList<Edge> [] graph=new ArrayList[vtces];
         for(int i=0;i<vtces;i++) {
           graph[i]=new ArrayList<>();
         } 
         
             graph[0].add(new Edge(0,1,10));
           
             graph[1].add(new Edge(1,0,10));
             graph[2].add(new Edge(2,3,10));
   
             graph[3].add(new Edge(3,2,10));
            
             graph[4].add(new Edge(4,5,3));
             graph[4].add(new Edge(4,6,3));
             graph[5].add(new Edge(5,4,3));
             graph[5].add(new Edge(5,6,3));
             graph[6].add(new Edge(6,4,3));
             graph[6].add(new Edge(6,5,3));
            
             
           boolean[] visited=new boolean[vtces];
           ArrayList<ArrayList<Integer>> comps=new ArrayList<>(); 
           for(int v=0;v<graph.length;v++){
              if(visited[v]==false){
               ArrayList<Integer> comp=new ArrayList<>();
               drawTree(graph,v,comp,visited);
               comps.add(comp);
              }
            }
           //[[0,1],[2,3],[4,5,6]]
           /*   0-2,0-3,1-2,1-3  2*2=4
            *   0-4,0-5,0-6,1-4,1-5,1-6   2*3=6
            *   2-3,2-5,2-6,3-4,3-5,3-6   2*3=6
            *  4+6+6=16
            */
           int pair=0;
           for(int i=0;i<comps.size()-1;i++) {
        	   for(int j=i+1;j<comps.size();j++) {
        		   int count=comps.get(i).size()*comps.get(j).size();
        		   pair+=count;
        	   }
           }
           System.out.println(pair);
     }
}
